@import Main._

@sect{ChuckwagonBasePlugin}

    @p
        This plugin is a dependency of both @sect.ref{ChuckwagonPublishPlugin} and @sect.ref{ChuckwagonCopyPlugin}. It contains Settings, Tasks and helper functions that are useful whether you are publishing an AWS Lambda from source or copying one from another Account.

    @p
        Here are the base Settings available to both the @code{ChuckwagonPublishPlugin} and the @code{ChuckwagonCopyPlugin} (in addition to their own).

    @table(
        `class` := "pure-table pure-table-bordered pure-table-striped",
        thead(tr(td("Setting"), td("Example"), td("Description"))),
        tbody(
          tr(td("chuckName"), td("myFirstLambda"), td("The name to be used creating/updating the AWS Lambda")),
          tr(td("chuckRegion"), td("eu-west-1"), td("The AWS Region within which to create/update the AWS Lambda")),
          tr(td("chuckEnvironments"), td("""Set[String]("blue-qa", "qa")"""), td("(Optional) The Environments into which the the AWS Lambda should be published, copied and/or promoted (known as Aliases in the AWS Console)")),
          tr(td("chuckAWSCredentialsProvider"), td("new MyCustomAWSCredentialsProvider()"), td("(Optional) The credentials provider to use for AWS interactions. By default this uses the DefaultAWSCredentialsProviderChain. You can override it with any AWSCredentialsProvider")),
          tr(td("chuckSDKFreeCompiler"), td("WIP"), td("(Optional) For testing pipelines against mock versions of the AWS SDK"))
        ))

    @p
        Here are the base Tasks available to both the @code{ChuckwagonPublishPlugin} and the @code{ChuckwagonCopyPlugin} (in addition to their own).

    @table(
        `class` := "pure-table pure-table-bordered pure-table-striped",
        thead(tr(td("Task"), td("Description"))),
        tbody(
          tr(td("chuckCurrentEnvironments"), td("The Environments (AWS Aliases) currently configured (if it exists)")),
          tr(td("chuckCurrentlyPublished"), td("The currently published versions of this AWS Lambda (if it exists)")),
          tr(td("chuckPromote"), td("""Promote the AWS Lambda Version in the first Environment (AWS Alias) to the second. Environments must exist in chuckEnvironments Setting, but associated Aliases will be created in AWS if they are missing. eg "chuckPromote blue-qa qa"""")),
          tr(td("chuckCleanUp"), td("Remove all AWS Lambda Versions not deployed to an Environment (AWS Alias) and all Environments not defined in chuckEnvironments Setting")),
          tr(td("chuckSetLambdaTrigger"), td("""Schedule AWS Lambda to be invoked based on a cron expression eg 'chuckSetLambdaTrigger qa "rate(1 minute)"'""")),
          tr(td("chuckRemoveLambdaTrigger"), td("Remove Scheduled execution associated with AWS Lambda")),
          tr(td("chuckInvoke", td("Invoke the AWS Lambda (if it exists). SNAPSHOT if no arguments passed. Otherwise either the version or the environment passed as a parameter. Sends no arguments but does print output.")))
        ))

    @p
        Here are the base helper functions available to both the @code{ChuckwagonPublishPlugin} and the @code{ChuckwagonCopyPlugin} (in addition to their own).

    @sect{chuckVpcUsingIdsBuilder}

        Starts a fluent builder for a @code{VpcConfigUsingIdsLookup} (which extends the @code{VpcConfigLookup} required by both @code{chuckPublishConfigBuilder} and @code{chuckCopyConfigBuilder} for their @code{withVpc} builder methods.

        @p
            Here is an example (which is useless alone but which could be dropped into either plugin).

        @hl.scala
            chuckVpcUsingIdsBuilder
              .withVpcId("vpc-12345678")
              .withSubnetIds("subnet-a2345678", "subnet-b2345678")
              .withSecurityGroupIds("sg-12345678")

        @p
            Here are some notes on all of the parameters available to @code{chuckVpcUsingIdsBuilder}

        @table(
            `class` := "pure-table pure-table-bordered pure-table-striped",
            thead(tr(td("Parameter"), td("Notes"))),
            tbody(
              tr(td("VpcId"), td("The string for a VPC Id")),
              tr(td("SubnetIds"), td("One or more Subnet Ids")),
              tr(td("SecurityGroupIds"), td("One or more Security Group Ids"))
            ))

    @sect{chuckVpcUsingFiltersBuilder}

        Starts a fluent builder for a @code{VpcConfigUsingFiltersLookup} (which extends the @code{VpcConfigLookup} required by both @code{chuckPublishConfigBuilder} and @code{chuckCopyConfigBuilder} for their @code{withVpc} builder methods.

        @p
            Here is an example (which is useless alone but which could be dropped into either plugin).

        @hl.scala
            chuckVpcUsingFiltersBuilder
              .withVpcLookupFilters("tag:Name" -> "prd-vpc")
              .withSubnetsLookupFilters("tag:Name" -> "private-subnet*")
              .withSecurityGroupsLookupFilters("group-name" -> "default")

        @p
            Here are some notes on all of the parameters available to @code{chuckVpcUsingFiltersBuilder}

        @table(
            `class` := "pure-table pure-table-bordered pure-table-striped",
            thead(tr(td("Parameter"), td("Notes"))),
            tbody(
              tr(td("VpcLookupFilters"), td("One or more tuples representing AWS Filters that can select a single AWS VPC")),
              tr(td("SubnetsLookupFilters"), td("One or more tuples representing AWS Filters that can select zero or more AWS Subnets")),
              tr(td("SecurityGroupsLookupFilters"), td("One or more tuples representing AWS Filters that can select zero or more Security Groups"))
            ))

@sect{ChuckwagonPublishPlugin}

    @p
        This plugin allows you to build, configure and publish AWS Lambdas. It has only one setting, @code{chuckPublishConfig} which you configure using a fluent builder started by @code{chuckPublishConfigBuilder}. Here is an example that sets every required and optional parameter.

    @hl.scala
        chuckPublishConfig := chuckPublishConfigBuilder
          .withHandler("com.itv.MyHandler::handler")
          .withMemorySizeInMB(256)
          .withTimeout("5 seconds")
          .withStagingBucketName("dev-staging")
          .withStagingBucketKeyPrefix("forChuckwagon")
          .withRoleARN(
            "arn:aws:iam::123456789012:role/dev_lambda_execute")
          .withVpc(chuckVpcUsingFiltersBuilder
            .withVpcLookupFilters("tag:Name" -> "qa-vpc")
            .withSubnetsLookupFilters("tag:Name" -> "private-subnet*")
            .withSecurityGroupsLookupFilters("group-name" -> "default"))
          .withDeadLetterARN("arn:aws:sqs:eu-west-1:444455556666:dlq")
          .withCodeFile(assembly)

    @p
        Here are some notes on all of the parameters available to @code{chuckPublishConfigBuilder}

    @table(
        `class` := "pure-table pure-table-bordered pure-table-striped",
        thead(tr(td("Parameter"), td("Notes"))),
        tbody(
          tr(td("Handler"), td("The fully qualified class and method of the Handler")),
          tr(td("MemorySizeInMB"), td("Must be between 128 and 1536 MBs")),
          tr(td("Timeout"), td("Must be between 1 and 300 seconds")),
          tr(td("StagingBucketName"), td("Bucket that fat JAR will be uploaded to for Lambda create/update")),
          tr(td("StagingBucketKeyPrefix"), td("(Optional) Key prefix that will be used when fat JAR is uploaded to S3")),
          tr(td("RoleARN"), td("(Optional) Pre-existing ARN that AWS Lambda will be configured to execute using")),
          tr(td("Vpc"), td("(Optional) specify the VPC properties to configure the AWS Lambda with using either 'chuckVpcUsingIdsBuilder' or 'chuckVpcUsingFiltersBuilder'")),
          tr(td("DeadLetterARN"), td("(Optional) specify the ARN of an SQS or SNS endpoint where messages that failed Lambda invocation to be delivered")),
          tr(td("CodeFile"), td("A Task[File] that produces a fat JAR suitable for creating an AWS Lambda with."))
        ))

    @p
        Here are the Tasks available to the @code{ChuckwagonPublishPlugin}

    @table(
        `class` := "pure-table pure-table-bordered pure-table-striped",
        thead(tr(td("Task"), td("Description"))),
        tbody(
          tr(td("chuckPublishSnapshot"), td("Compile/Create/Update $LATEST AWS Lambda according to chuckPublishConfig Setting (Not recommended for real world usage)")),
          tr(td("chuckPublish"), td("As chuckPublishSnapshot except additionally create a (Numbered) Lambda Version immutable copy of $LATEST (Not recommended for real world usage)")),
          tr(td("chuckPublishTo"), td("As chuckPublish except additionally assign the Lambda Version to the environment passed as an input parameter (must be one of environments defined in chuckEnvironments)"))
        ))

@sect{ChuckwagonCopyPlugin}

    @p
        This plugin allows you to copy AWS Lambdas from another Account. It has only one setting, @code{chuckCopyConfig} which you configure using a fluent builder started by @code{chuckCopyConfigBuilder}. Here is an example that sets every required and optional parameter.

    @hl.scala
        chuckPublishConfig := chuckPublishConfigBuilder
          .withStagingBucketName("prd-staging")
          .withStagingBucketKeyPrefix("forChuckwagon")
          .withRoleARN(
            "arn:aws:iam::0987654321098:role/prd_lambda_execute")
          .withVpc(chuckVpcUsingFiltersBuilder
            .withVpcLookupFilters("tag:Name" -> "prd-vpc")
            .withSubnetsLookupFilters("tag:Name" -> "private-subnet*")
            .withSecurityGroupsLookupFilters("group-name" -> "default"))
          .withAssumableDevAccountRoleARN(
            "arn:aws:iam::123456789012:role/dev_lambda_get_granted_to_prd")

    @p
        Here are some notes on all of the parameters available to @code{chuckCopyConfigBuilder}

    @table(
        `class` := "pure-table pure-table-bordered pure-table-striped",
        thead(tr(td("Parameter"), td("Notes"))),
        tbody(
          tr(td("StagingBucketName"), td("Bucket that fat JAR will be uploaded to for Lambda create/update")),
          tr(td("StagingBucketKeyPrefix"), td("(Optional) Key prefix that will be used when fat JAR is uploaded to S3")),
          tr(td("RoleARN"), td("(Optional) Pre-existing ARN that AWS Lambda will be configured to execute using")),
          tr(td("Vpc"), td("(Optional) specify the VPC properties to configure the AWS Lambda with using either 'chuckVpcUsingIdsBuilder' or 'chuckVpcUsingFiltersBuilder'")),
          tr(td("AssumableDevAccountRoleARN"), td("The ARN of a Role in the Development Account that can be used to download the Lambda"))
        ))

    @p
        Here are the Tasks available to the @code{ChuckwagonCopyPlugin}

    @table(
        `class` := "pure-table pure-table-bordered pure-table-striped",
        thead(tr(td("Task"), td("Description"))),
        tbody(
          tr(td("chuckCopyFromOtherAccountTo"), td("Copy an AWS Lambda from another account and publish it to the Environment expressed as an input parameter in this Account (using chuckPublishConfig Setting)"))
        ))
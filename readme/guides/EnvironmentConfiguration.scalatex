@import Main._

Several times in the @sect.ref{Deployment Pipelines} Guide we mentioned that even though you can deploy a Lambda to more than one environment it still only exists in one place. This is because what you are actually doing is pointing two or more AWS Aliases at the same Lambda. This is an efficient feature because it means that Amazon doesn't have to create multiple copies of the JAR file / Lambda Configuration metadata that isn't allowed to change in any case. It does, however, highlight a challenge in AWS. How do you apply environment specific configuration to an AWS Lambda?

@sect{Dead Ends}

    @p
        Traditionally when configuring a Service you deploy an environmental configuration file along side it on the box it is deployed to. This configuration file contains things like the location of that service's database in the associated environment. There is no built in way to associate an environmental configuration file with an AWS Lambda.

    @p
        AWS Lambda provides a feature called 'Environment variables' that do at first glance look suitable for this purpose. However, AWS Lambda environment variables cannot be configured per environment. They appropriate the term environment from shell scripting, where variables can be passed to scripts by setting them as global constants on the shell. AWS Lambda doesn't run in such a shell/environment. Once you version a Lambda its environment variables cannot be changed. They are intended to be used to save time changing configuration that would otherwise require a code deployment, but this is a very different thing to the flexibility of environment variables in a shell scripting environment.

    @p
        Consequently, since code deployments are very fast and accessing AWS Lambda environment variables is necessarily cumbersome they are not obviously ideal for any use. It is possible that they would be useful for encrypted fields. Chuckwagon does not yet support such functionality.

@sect{Environment Detection}

    @p
        The only way to manage Environment specific variables in AWS Lambda is to take advantage of the fact that when your Lambda is executed it knows which ARN was used to invoke it. The environment is the final section of the ARN. For example,

    @blockquote
        @code{arn:aws:lambda:eu-west-1:123456789012:function:demo:qa} - QA
        @code{arn:aws:lambda:eu-west-1:123456789012:function:demo:prd} - PRODUCTION

    The ARN is passed to the Lambda Handler in the Context and so needs to be detected each time that the Lambda executes.

@sect{Deriving Configuration}

    You could use the knowledge of which environment you are in to lookup configuration on an external system (for example @lnk("Consul", "https://www.consul.io/")). This might well make sense for configuration produced very frequently by automation or sensitive configuration that needs to be encrypted (especially if your infrastructure team already has such a setup). However, for most configuration the ideal way to store it is as typed classes inside your own code base. Given that it should be possible to push a Lambda from check-in to Production in a couple of minutes, even the time to change configuration is negligible.

    @p
        The Chuckwagon Library makes configuration stored inside the Lambda codebase simple to lookup on a per environment basis. Consider the following changes to the @code{Helloworld.scala} Handler introduced in the @sect.ref{Getting Started} guide,

    @hl.scala
        import com.amazonaws.services.lambda.runtime.Context
        import com.itv.chuckwagon.lambda._
        import io.circe.generic.auto._

        case class Response(response: String)

        case class HelloConfig(env: String, someServiceLocation: String) extends LambdaConfigForEnv

        object Helloworld {
          val configs = LambdaConfig(
            HelloConfig(env = "qa", someServiceLocation = "testLocation"),
            HelloConfig(env = "prd", someServiceLocation = "prdLocation")
          )
        }

        class Helloworld extends Handler[Unit, Response] {
          def handler(query: Unit, context: Context): Response = {

            val config = Helloworld.configs.configFor(context)

            Response(s"Hello World from ${config.env}!")
          }
        }

    This code now does a number of interesting things in addition to printing 'Hello World',

    @ul
        @li
            It defines a Case Class @code{HelloConfig} that can be used to describe the configuration for the function. This class extends the Chuckwagon library trait @code{LambdaConfigForEnv},

             @hl.scala
                 trait LambdaConfigForEnv {
                   val env: String
                 }

             @code{LambdaConfigForEnv} forces your configuration case class to have the field @code{env: String}. This is used to determine what environment it applies to.

        @li
            It declares all of the configurations for all of its environments using the Chuckwagon library class @code{LambdaConfig}. This class has a type signature of,

            @hl.scala
                case class LambdaConfig[T <: LambdaConfigForEnv](configs: T*)

            This means you can declare as many configurations as you want as long as they are a sub-type of @code{LambdaConfigForEnv} (as @code{HelloConfig} is).

        @li
            With configurations defined and declared the @code{Helloworld} Handler function is then able to derive the appropriate Configuration for the environment it was called in from the @code{Context} using a helper method on @code{LambdaConfig},

            @hl.scala
                val config = Helloworld.configs.configFor(context)

        @li
            Finally, the @code{Helloworld} function makes trivial usage of this configuration to modify its response and add the environment it ran in. It is easy to see how environmental configuration could be utilised more easily in real life.

    This example code is really all you need in order to add per environment configuration to Lambdas deployed into an Environment. It is extremely simple, but also extremely powerful.